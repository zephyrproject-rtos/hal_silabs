#!/usr/bin/env python

"""
Copyright (c) 2025 Silicon Laboratories Inc.

SPDX-License-Identifier: Apache-2.0
"""
import argparse
import datetime
import re
from pathlib import Path

devices = {
  "xg23": {
    "bits": "platform/Device/SiliconLabs/EFR32FG23/Include/efr32fg23_vdac.h",
  },
  "xg24": {
    "bits": "platform/Device/SiliconLabs/EFR32MG24/Include/efr32mg24_vdac.h",
  },
}

def insert(values, key, val):
  if key in values:
    assert values[key] == val, f"{key} = {values[key]} from a previous device, new value = {val}"
  else:
    values[key] = val


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Generate headers for DAC for Series 2 "
                                   "devices. The headers are used from DeviceTree, and represent "
                                   "every DAC input as a DT compatible macro.")
  parser.add_argument("--out", "-o", type=Path, default=Path(__file__).parent / "out",
                      help="Output directory. Defaults to the directory ./out/ relative to the "
                      "script. Set to $ZEPHYR_BASE/include/zephyr/dt-bindings/dac/ "
                      "to directly generate output into the expected location within the Zephyr "
                      "main tree.")
  parser.add_argument("--sdk", "-s", type=Path, default=Path(__file__).parent.parent / "simplicity_sdk",
                      help="Path to Simplicity SDK to extract data from. Defaults to the directory "
                       "../simplicity_sdk relative to the script.")
  args = parser.parse_args()

  args.out.mkdir(exist_ok=True)

  values = {}
  for device, data_source in devices.items():
    print(f"Parse VDAC data for {device}")
    
    with (args.sdk / data_source["bits"]).open() as f:
      for line in f:
        # Extract port values
        if m := re.match(r"#define _VDAC_OUTCTRL_ABUSPORTSELCH0_(\w+)\s+(0x[0-9A-F]+)UL", line):
          port = m.group(1)
          port_base = int(m.group(2), base=16) << 4
          if port in ["MASK", "DEFAULT"]:
             continue
          if port == "NONE":
            # NONE gets renamed to AUX
            insert(values, "AUX", port_base)
          elif port.startswith("PORT"):
            for pin in range(16):
              insert(values, f"P{port[4]}{pin}", port_base + pin)
          else:
            # All other values are handled directly
            insert(values, port, port_base)

  file = [
    "/*",
    f" * Copyright (c) {datetime.date.today().year} Silicon Laboratories Inc.",
    " *",
    " * SPDX-License-Identifier: Apache-2.0",
    " *",
    f" * This file was generated by the script {Path(__file__).name} in the hal_silabs module.",
    " * Do not manually edit.",
    " */",
    "",
    f"#ifndef ZEPHYR_INCLUDE_DT_BINDINGS_DAC_SILABS_VDAC_H_",
    f"#define ZEPHYR_INCLUDE_DT_BINDINGS_DAC_SILABS_VDAC_H_",
    "",
  ]

  max_key = max(len(k) for k in values)
  for k, v in sorted(values.items(), key=lambda i: (i[1],i[0])):
    file.append(f"#define VDAC_OUTPUT_{k}{' ' * (max_key - len(k) + 4)}0x{v:x}")

  file.append("")
  file.append(f"#endif /* ZEPHYR_INCLUDE_DT_BINDINGS_DAC_SILABS_VDAC_H_ */")
  file.append("")

  outfile = args.out / f"silabs-vdac.h"
  outfile.write_text("\n".join(file))
